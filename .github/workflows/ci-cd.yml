name: CI/CD Pipeline (EC2 Free Tier)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test || echo "No tests specified"

    - name: Login to Amazon ECR
      id: login-ecr
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Build, tag, and push image to Amazon ECR
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: mern-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  terraform:
    name: Terraform Infra Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate

    - name: Terraform Plan (Dry Run Infra Check)
      run: terraform plan -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}"
      working-directory: terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        TF_VAR_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
        TF_VAR_private_key: ${{ secrets.EC2_PRIVATE_KEY }}
        TF_VAR_instance_type: t2.micro
        TF_VAR_ami: ami-0c55b159cbfafe1f0 # Amazon Linux 2 AMI (HVM), SSD Volume Type
        TF_VAR_key_name: ${{ secrets.EC2_KEY_NAME }}
        TF_VAR_security_group: ${{ secrets.EC2_SECURITY_GROUP }}
        TF_VAR_subnet_id: ${{ secrets.EC2_SUBNET_ID }}
        TF_VAR_vpc_id: ${{ secrets.EC2_VPC_ID }}
        TF_VAR_instance_count: 1
        TF_VAR_instance_name: mern-app-instance
        TF_VAR_instance_ami: ami-0c55b159cbfafe1f0 # Amazon Linux 2 AMI (HVM), SSD Volume Type
        

  deploy:
    needs: [build, terraform]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get ECR login password
      id: ecr-login
      run: echo "::set-output name=password::$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})"

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
        chmod 600 ~/.ssh/ec2_key.pem
        echo "${{ secrets.EC2_HOST }} $(ssh-keyscan ${{ secrets.EC2_HOST }} 2>/dev/null)" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

    - name: Test SSH connection
      run: |
        ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=accept-new ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo SSH connection successful"

    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        ECR_REGISTRY: ${{ needs.build.outputs.ecr_registry }}
        IMAGE_TAG: ${{ github.sha }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        ssh -i ~/.ssh/ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # Install AWS CLI if not present
          if ! command -v aws &> /dev/null; then
            echo "Installing AWS CLI..."
            sudo apt-get update
            sudo apt-get install -y awscli
          fi

          # Configure AWS credentials on the EC2 instance
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << 'AWSEOF'
        [default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region=${{ secrets.AWS_REGION }}
        AWSEOF

          # Login to ECR
          echo "Logging into ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ needs.build.outputs.ecr_registry }}
          
          # Pull the latest image
          echo "Pulling image..."
          docker pull ${{ needs.build.outputs.ecr_registry }}/mern-app:${{ github.sha }}
          
          # Stop and remove existing container if any
          echo "Stopping old container..."
          docker stop mern-app 2>/dev/null || true
          docker rm mern-app 2>/dev/null || true
          
          # Run the new container
          echo "Starting new container..."
          docker run -d \
            --name mern-app \
            -p 80:3000 \
            --restart always \
            -e NODE_ENV=production \
            ${{ needs.build.outputs.ecr_registry }}/mern-app:${{ github.sha }}
            
          # Verify container is running
          echo "Verifying deployment..."
          sleep 5
          if docker ps | grep -q mern-app; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            docker logs mern-app
            exit 1
          fi
        EOF

    - name: Cleanup
      if: always()
      run: rm -f ~/.ssh/ec2_key.pem

    
